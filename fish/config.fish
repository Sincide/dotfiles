# Fish Configuration

# Set greeting
set fish_greeting ""

set -gx EDITOR nano

# Add ~/.local/bin to PATH
fish_add_path ~/.local/bin

# ============================================================================
# FISHER PLUGIN CONFIGURATION
# ============================================================================

# FZF Configuration (Evil Space Theme)
set -gx FZF_DEFAULT_OPTS "--color=bg+:#e6bdbd,bg:#1a1111,spinner:#ffb3b5,hl:#e6c08d --color=fg:#d7c1c1,header:#e6c08d,info:#ffb4ab,pointer:#ffb3b5 --color=marker:#ffb3b5,fg+:#561d23,prompt:#ffb3b5,hl+:#e6c08d"

# Done plugin configuration
set -U __done_min_cmd_duration 10000  # 10 seconds
set -U __done_notification_urgency_level low
set -U __done_exclude 'git (?!push|pull|fetch|clone|commit)'

# FZF key bindings (Evil Space style)
set -g fzf_preview_dir_cmd "ls -la"
set -g fzf_preview_file_cmd "cat"

# Z plugin configuration
set -gx _Z_DATA ~/.local/share/z/data

# Abbreviation tips configuration
set -g abbr_tips_prompt "üí° "
set -g abbr_tips_regexes '^git\s' '^sudo\s' '^cd\s' '^ls\s' '^rm\s'

# Source dynamic theme colors (generated by matugen)
if test -f ~/dotfiles/fish/theme-dynamic.fish
    source ~/dotfiles/fish/theme-dynamic.fish
end

# Set dynamic Starship configuration
set -gx STARSHIP_CONFIG ~/dotfiles/starship/starship-dynamic.toml

# ============================================================================
# DOTFILES & AI MANAGEMENT ALIASES
# ============================================================================

# Dotfiles Management (Enhanced with Claude Code)
alias dot='$HOME/dotfiles/scripts/git/claude-dotfiles.fish'              # Interactive menu
alias dots='$HOME/dotfiles/scripts/git/claude-dotfiles.fish sync'        # Quick sync with Claude
alias dotst='$HOME/dotfiles/scripts/git/claude-dotfiles.fish status'     # Repository status
alias dotd='$HOME/dotfiles/scripts/git/claude-dotfiles.fish diff'        # Show changes
alias dotai='$HOME/dotfiles/scripts/git/claude-dotfiles.fish claude-test'    # Test Claude commits
alias dotfix='$HOME/dotfiles/scripts/git/claude-dotfiles.fish claude-debug'  # Debug Claude issues
alias dotr='$HOME/dotfiles/scripts/git/claude-dotfiles.fish toggle-remote' # Toggle SSH/HTTPS remote

# AI Health & Diagnostics  
alias ai='$HOME/dotfiles/scripts/ai/ai-health.fish'               # Interactive AI health menu
alias ai-quick='$HOME/dotfiles/scripts/ai/ai-health.fish quick'   # Quick AI status
alias ai-gpu='$HOME/dotfiles/scripts/ai/ai-health.fish gpu'       # GPU diagnostics
alias ai-models='$HOME/dotfiles/scripts/ai/ai-health.fish models' # List installed models
alias ai-bench='$HOME/dotfiles/scripts/ai/ai-health.fish benchmark' # Performance test
alias ai-sys='$HOME/dotfiles/scripts/ai/ai-health.fish system'    # System resources
alias ai-ollama='$HOME/dotfiles/scripts/ai/ai-health.fish ollama' # Ollama service status
alias ai-tips='$HOME/dotfiles/scripts/ai/ai-health.fish recommendations' # Optimization tips

# Claude Usage Monitoring
alias claude-usage='$HOME/dotfiles/scripts/ai/claude-usage.fish'         # Claude usage status
alias claude-live='$HOME/dotfiles/scripts/ai/claude-usage.fish live'     # Live usage monitor
alias claude-install='$HOME/dotfiles/scripts/ai/claude-usage.fish install' # Install monitoring tools

# Quick Dotfiles Functions (Super convenient!)
function dotc
    # Quick commit with custom message: dotc "fix: update config"
    $HOME/dotfiles/scripts/git/claude-dotfiles.fish sync "$argv"
end

function dotf
    # Quick find in dotfiles: dotf "fish"
    find $HOME/dotfiles -name "*$argv*" -type f
end

function doted
    # Quick edit config files: doted fish (opens config/fish/config.fish)
    set target "$argv"
    if test -z "$target"
        echo "Usage: doted <config_name>"
        echo "Examples: doted fish, doted kitty, doted waybar"
        return 1
    end
    
    # Look for the config file
    set config_file (find $HOME/dotfiles/config -name "*$target*" -type f | head -1)
    if test -n "$config_file"
        $EDITOR "$config_file"
    else
        echo "Config file for '$target' not found"
        echo "Available configs:"
        ls $HOME/dotfiles/config/
    end
end

# Ollama Management Shortcuts
alias ollama-start='ollama serve'                    # Start Ollama service
alias ollama-models='ollama list'                    # List models
alias ollama-pull='ollama pull'                      # Pull/download model
alias ollama-rm='ollama rm'                          # Remove model
alias ollama-chat='ollama run'                       # Quick chat with model

# Popular Model Shortcuts (adjust to your preferences)
alias llama='ollama run llama3.2:3b'                # Quick Llama chat
alias coder='ollama run qwen2.5-coder:14b'          # Coding assistant
alias mistral='ollama run mistral:7b-instruct'      # Mistral chat

# System Monitoring Aliases (AI-related)
alias gpu-status='nvidia-smi'                        # GPU status (if NVIDIA)
alias gpu-watch='watch -n 1 nvidia-smi'             # Watch GPU usage
alias ram-free='free -h'                            # Memory usage
alias disk-space='df -h'                            # Disk usage
alias processes='ps aux | grep -E "(ollama|python|node)"' # AI-related processes

# Enhanced navigation
alias cdot='cd $HOME/dotfiles'                      # Go to dotfiles
alias cdot-config='cd $HOME/dotfiles/config'        # Go to configs
alias cdot-scripts='cd $HOME/dotfiles/scripts'      # Go to scripts
alias cdot-git='cd $HOME/dotfiles/scripts/git'      # Go to git scripts
alias cdot-ai='cd $HOME/dotfiles/scripts/ai'        # Go to AI scripts

# ============================================================================
# REGULAR ALIASES (Your existing ones)
# ============================================================================

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias vim='nano'
alias vi='nano'
alias cls='clear'
alias ff='fastfetch'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias glog='git log --oneline --graph --decorate --all'
alias gst='git status --short'
alias gaa='git add --all'
alias gcm='git commit -m'
alias gps='git push'
alias gpl='git pull'
alias gco-='git checkout -'

# Additional useful aliases
alias tree='tree -C'
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps aux'
alias top='htop'
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias mkdir='mkdir -pv'
alias which='type -a'

# Development shortcuts
alias serve='python -m http.server 8000'
alias myip='curl -s ifconfig.me'
alias localip='ip route get 1 | awk "{print \$NF; exit}"'
alias ports='netstat -tuln'

# ============================================================================
# FUNCTIONS (Your existing ones)
# ============================================================================

# Function to extract archives
function extract
    if test -f $argv[1]
        switch $argv[1]
            case '*.tar.bz2'
                tar xjf $argv[1]
            case '*.tar.gz'
                tar xzf $argv[1]
            case '*.bz2'
                bunzip2 $argv[1]
            case '*.rar'
                unrar x $argv[1]
            case '*.gz'
                gunzip $argv[1]
            case '*.tar'
                tar xf $argv[1]
            case '*.tbz2'
                tar xjf $argv[1]
            case '*.tgz'
                tar xzf $argv[1]
            case '*.zip'
                unzip $argv[1]
            case '*.Z'
                uncompress $argv[1]
            case '*.7z'
                7z x $argv[1]
            case '*'
                echo "'$argv[1]' cannot be extracted via extract()"
        end
    else
        echo "'$argv[1]' is not a valid file"
    end
end

# Function to create and enter directory
function mkcd
    mkdir -p $argv[1] && cd $argv[1]
end

# Function to find files
function findfile
    find . -name "*$argv[1]*" -type f
end

# Function to find directories
function fd
    find . -name "*$argv[1]*" -type d
end

# Function to show disk usage of current directory
function duh
    du -sh * | sort -hr
end

# Function to convert MKV files using VAAPI hardware acceleration
function vaapi-convert
    # Get target directory from argument or use current directory
    if test (count $argv) -ge 1
        set target_dir $argv[1]
        if not test -d "$target_dir"
            echo "‚ùå Error: Directory '$target_dir' does not exist"
            return 1
        end
    else
        set target_dir (pwd)
    end

    set suffix "[H264]"
    set device "/dev/dri/renderD128"
    set bitrate "3000k"

    echo "üé¨ Scanning for .mkv files in: $target_dir"

    for file in (find "$target_dir" -type f -iname "*.mkv")
        echo "üîç Checking: $file"

        if string match -q "*$suffix*" "$file"
            echo "‚è≠Ô∏è  Skipping already converted: $file"
            continue
        end

        set dir (dirname "$file")
        set base (basename "$file" .mkv)
        set output "$dir/$base $suffix.mkv"

        echo "üéûÔ∏è  Converting: $file"
        ffmpeg -y \
          -hwaccel vaapi -vaapi_device $device \
          -i "$file" \
          -vf 'format=nv12,hwupload' \
          -c:v h264_vaapi -b:v $bitrate \
          -c:a copy \
          "$output"

        echo "‚úÖ Finished: $output"
    end

    echo "üéâ All files in $target_dir processed!"
end

# ============================================================================
# EVIL SPACE ABBREVIATIONS (with Fisher plugins)
# ============================================================================

# Git abbreviations (enhanced with fzf)
abbr -a gs 'git status'
abbr -a ga 'git add'
abbr -a gaa 'git add --all'
abbr -a gc 'git commit'
abbr -a gcm 'git commit -m'
abbr -a gp 'git push'
abbr -a gpl 'git pull'
abbr -a gl 'git log --oneline --graph --decorate'
abbr -a gd 'git diff'
abbr -a gb 'git branch'
abbr -a gco 'git checkout'
abbr -a gst 'git stash'
abbr -a gsp 'git stash pop'

# System abbreviations
abbr -a ll 'ls -la'
abbr -a la 'ls -A'
abbr -a .. 'cd ..'
abbr -a ... 'cd ../..'
abbr -a .... 'cd ../../..'
abbr -a cls 'clear'
abbr -a ff 'fastfetch'

# Directory shortcuts (works with z plugin)
abbr -a dotf 'cd ~/dotfiles'
abbr -a conf 'cd ~/.config'
abbr -a down 'cd ~/Downloads'
abbr -a docs 'cd ~/Documents'

# Evil development shortcuts
abbr -a serve 'python -m http.server 8000'
abbr -a ports 'netstat -tuln'
abbr -a myip 'curl -s ifconfig.me'

# Package management (Arch)
abbr -a paci 'sudo pacman -S'
abbr -a pacr 'sudo pacman -R'
abbr -a pacu 'sudo pacman -Syu'
abbr -a pacs 'pacman -Ss'
abbr -a pacq 'pacman -Q'

# Docker shortcuts
abbr -a dps 'docker ps'
abbr -a dpsa 'docker ps -a'
abbr -a di 'docker images'
abbr -a drun 'docker run -it --rm'

# Evil Space specific
abbr -a theme '~/dotfiles/scripts/theming/dynamic_theme_switcher.sh'
abbr -a wall 'swww img'
abbr -a matugen-gen 'matugen color'

# ============================================================================
# QUICK HELP FUNCTIONS
# ============================================================================

function dot-help
    echo "üêü Dotfiles Management Commands (Claude-powered):"
    echo "  dot         - Interactive dotfiles menu"
    echo "  dots        - Quick sync with Claude commit"
    echo "  dotc \"msg\"  - Sync with custom commit message"
    echo "  dotst       - Show repository status"
    echo "  dotd        - Show changes/diff"
    echo "  dotai       - Test Claude commit generation"
    echo "  dotfix      - Debug Claude issues"
    echo "  doted <app> - Edit config file (e.g., doted fish)"
    echo "  dotf <name> - Find files in dotfiles"
    echo "  cdot        - Go to dotfiles directory"
end

function ai-help
    echo "ü§ñ AI Management Commands:"
    echo "  ai          - Interactive AI health menu"
    echo "  ai-quick    - Quick AI status check"
    echo "  ai-gpu      - GPU diagnostics"
    echo "  ai-models   - List installed models"
    echo "  ai-bench    - Performance benchmark"
    echo "  ai-sys      - System resources"
    echo "  ai-ollama   - Ollama service status"
    echo "  ai-tips     - Optimization recommendations"
    echo ""
    echo "ü§ñ Claude Usage Monitoring:"
    echo "  claude-usage      - Show Claude Pro/Max usage status"
    echo "  claude-live       - Live usage monitoring"
    echo "  claude-install    - Install external monitoring tools"
    echo ""
    echo "ü¶ô Model Shortcuts:"
    echo "  llama       - Chat with Llama model"
    echo "  coder       - Chat with coding model"
    echo "  mistral     - Chat with Mistral model"
end

# Quick reference
function aliases-help
    echo "üìö Available Help Commands:"
    echo "  dot-help    - Dotfiles management commands"
    echo "  ai-help     - AI & Ollama commands"
    echo "  aliases-help - This help message"
end

# ============================================================================
# INITIALIZATION
# ============================================================================

# Starship prompt (cross-shell prompt written in Rust)
if command -v starship > /dev/null
    starship init fish | source
end

# bun
set --export BUN_INSTALL "$HOME/.bun"
set --export PATH $BUN_INSTALL/bin $PATH

# Fish settings for better experience
set -g fish_autosuggestion_enabled 1
set -g fish_greeting ""

# Enable vi mode (optional - uncomment if you prefer vi keybindings)
# fish_vi_key_bindings

# ROCm settings for AMD GPU
set -gx PATH /opt/rocm/bin $PATH
set -gx ROCM_PATH /opt/rocm
set -gx HSA_OVERRIDE_GFX_VERSION 11.0.0
# ROCm Environment Variables (Added by setup script)
set -gx PATH /opt/rocm/bin $PATH
set -gx ROCM_PATH /opt/rocm
set -gx HSA_OVERRIDE_GFX_VERSION 11.0.0
set -gx LD_LIBRARY_PATH /usr/lib/ollama/rocm:/opt/rocm/lib
set -gx HSA_OVERRIDE_GFX_VERSION "11.0.0"
set -gx HIP_VISIBLE_DEVICES 0
set -gx PATH $HOME/.local/bin $PATH
